/*
 *  This file is part of Block IDLE.
 *
 *  Block IDLE is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Block IDLE is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *   along with Block IDLE.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
	id "com.android.application"
	id "org.jetbrains.kotlin.android"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
	localProperties.load(new FileInputStream(localPropertiesFile))
}

android {
	namespace "com.icst.blockidle"
	compileSdk localProperties.getProperty("compileSdk", "35").toInteger()

	defaultConfig {
		applicationId "com.icst.blockidle"
		minSdk 21
		targetSdk 34
		versionCode 1
		versionName "1.0"

		vectorDrawables {
			useSupportLibrary true
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17
	}

	buildFeatures {
		viewBinding true
		dataBinding true
		buildConfig true
	}
}

dependencies {
	// Latest JUnit for unit tests (JVM)
	implementation("junit:junit:4.13.2")

	// Google Truth for better assertions (latest)
	implementation("com.google.truth:truth:1.4.2")

	// Lottie Animation
	implementation("com.airbnb.android:lottie:$lottie")

	// AndroidX
	implementation("androidx.appcompat:appcompat:$appcompat_version")
	implementation("androidx.core:core-splashscreen:$core_splashscreen")
	implementation("androidx.constraintlayout:constraintlayout:$constraintlayout")
	implementation("androidx.coordinatorlayout:coordinatorlayout:$coordinatorlayout")

	// Lifecycle (For MVVM)
	implementation("androidx.lifecycle:lifecycle-extensions:$lifecycle_version")
	implementation("androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version")
	implementation("androidx.lifecycle:lifecycle-livedata:$lifecycle_version")
	annotationProcessor("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")

	// Material Design
	implementation("com.google.android.material:material:$material_design_version")

	implementation project(":editor")

	// Extension Core
	implementation project(":extension-core")

	// Beans
	implementation project(":beans:basebeans")
	implementation project(":beans:blockbeans")
	implementation project(":beans:layoutbeans")
	implementation project(":beans:javabeans")
	implementation project(":beans:projectbeans")
	implementation project(":beans:xmlbeans")

	// Logic Editor
	implementation project(":logiceditor")

	// View Editor
	implementation project(":vieweditor")

	// TreeView
	implementation project(":treeview")
}

project.afterEvaluate {
	tasks.matching { it.name.startsWith("assemble") }.configureEach {
		finalizedBy(rootProject.tasks.named("spotlessApply"))
	}
}
